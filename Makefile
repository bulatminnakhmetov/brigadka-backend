# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env ---
ifneq ("$(wildcard .env)","")
	include .env
	export
endif

# --- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
build-release:
	# –°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –±–µ–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
	CGO_ENABLED=0 go build -tags netgo -ldflags "-s -w" -o bin/app ./cmd/service

build-debug:
	# –°–±–æ—Ä–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π, —Å –¥–µ–±–∞–≥-–∏–Ω—Ñ–æ–π)
	CGO_ENABLED=0 go build -gcflags "all=-N -l" -o bin/app-debug ./cmd/service

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
run-release: build-release
	# –ó–∞–ø—É—Å–∫ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GIN_MODE=release
	GIN_MODE=release ./bin/app

run-debug: build-debug
	# –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏
	./bin/app-debug

# --- –¢–µ—Å—Ç—ã ---
run-unit-tests:
	# –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
	go test ./internal/...

# --- –¢–µ—Å—Ç—ã ---
run-integration-tests: generate-local-ca
	cp .env.example .env
	# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ Docker
ifdef DEBUG-ENV
	# –ó–∞–ø—É—Å–∫ —Å –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
	@( \
		cleanup() { \
			echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."; \
			docker compose --profile test down -v --remove-orphans; \
		}; \
		trap cleanup EXIT INT TERM; \
		echo "üîç –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)"; \
		docker compose --profile test up --build --force-recreate --remove-orphans; \
	)
else
	# –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤
	@( \
		cleanup() { \
			echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."; \
			docker compose --profile test down -v --remove-orphans; \
		}; \
		trap cleanup EXIT INT TERM; \
		docker compose --profile test up --build --force-recreate --remove-orphans -d || { \
			echo "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"; \
			echo "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏, –∑–∞–ø—É—Å—Ç–∏—Ç–µ make run-integration-tests DEBUG-ENV=1"; \
			exit 1; \
		}; \
		docker compose logs -f tests & \
		TEST_LOGS_PID=$$!; \
		docker compose wait tests; \
		TEST_EXIT_CODE=$$?; \
		kill $$TEST_LOGS_PID 2>/dev/null || true; \
		exit $$TEST_EXIT_CODE; \
	)
endif

# --- –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
migrate-up:
	# –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
	go run ./cmd/migrate -up

migrate-down:
	# –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é
	go run ./cmd/migrate -down

migrate-create:
	# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (–∑–∞–ø—Ä–æ—Å–∏—Ç –∏–º—è)
	@read -p "Enter migration name: " name; \
	migrate create -ext sql -dir db/migrations -seq $$name

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
connect-local-db:
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	docker exec -it brigadka-backend-postgres-1 psql -U ${DB_USER} -d ${DB_NAME}

connect-db:
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏–∑ .env
	PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME}

# --- Swagger ---
generate-swagger:
	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è swagger-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	swag init -g cmd/service/main.go

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
prepare-debug-env: generate-local-ca
	# –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä .env –≤ —Ä–∞–±–æ—á–∏–π .env
	cp .env.example .env
	@echo "Detecting Docker environment..."
	@bash -c ' \
		DOCKER_HOST_IP=$$(colima status --json 2>/dev/null | jq -r ".ip_address" || echo ""); \
		if [ -z "$$DOCKER_HOST_IP" ] || [ "$$DOCKER_HOST_IP" = "null" ]; then \
			echo "Colima –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è Docker Desktop"; \
			DOCKER_HOST_IP=127.0.0.1; \
		else \
			echo "Colima IP: $$DOCKER_HOST_IP"; \
		fi; \
		ABS_CERT_PATH=$$(cd certs/ca && pwd)/ca.crt; \
		echo "Updating .env with DB_HOST=$$DOCKER_HOST_IP"; \
		sed -i.bak "s/^DB_HOST=.*/DB_HOST=$$DOCKER_HOST_IP/" .env && rm .env.bak; \
		echo "Updating .env with B2_ENDPOINT=$$DOCKER_HOST_IP:9000"; \
		sed -i.bak "s/^B2_ENDPOINT=.*/B2_ENDPOINT=$$DOCKER_HOST_IP:9000/" .env && rm .env.bak; \
		echo "Updating .env with SSL_CERT_FILE=$$ABS_CERT_PATH"; \
		if grep -q "^SSL_CERT_FILE=" .env; then \
			sed -i.bak "s|^SSL_CERT_FILE=.*|SSL_CERT_FILE=$$ABS_CERT_PATH|" .env && rm .env.bak; \
		else \
			echo "SSL_CERT_FILE=$$ABS_CERT_PATH" >> .env; \
		fi \
	'

start-debug-env: prepare-debug-env
	# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∫—Ä–æ–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	@echo "Starting services except app...";
	@echo "Press Ctrl+C to stop the debug environment";
	@trap 'docker compose --profile debug down -v --remove-orphans; exit' INT; \
	docker compose --profile debug up -d --build --force-recreate && \
	docker compose wait minio-init migrations && \
	echo "‚úÖ \033[1;32m–î–µ–±–∞–≥-–æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, make run-debug) –∏ –ø–æ–¥–µ–±–∞–∂–∏—Ç—å. –ù–∞–∂–º–∏—Ç–µ CTRL + C, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ.\033[0m"; \
	while true; do sleep 1; done

.PHONY: prepare-debug-env start-debug-env

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CA –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è MinIO ---
generate-local-ca:
	@echo "üîß \033[1;34m–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CA –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...\033[0m"
	# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è CA –∏ MinIO —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
	mkdir -p certs/ca certs/minio
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á CA
	openssl genrsa -out certs/ca/ca.key 4096
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
	openssl req -x509 -new -nodes -key certs/ca/ca.key -sha256 -days 3650 -out certs/ca/ca.crt -subj "/C=RU/ST=Local/L=Local/O=Local CA/CN=Local CA"
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è MinIO
	openssl genrsa -out certs/minio/private.key 4096
	# –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ shell
	@( \
		DOCKER_HOST_IP=$$(colima status --json 2>/dev/null | jq -r '.ip_address' || echo ""); \
		if [ -z "$$DOCKER_HOST_IP" ] || [ "$$DOCKER_HOST_IP" = "null" ]; then \
			echo "Colima –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è Docker Desktop"; \
			DOCKER_HOST_IP=127.0.0.1; \
		else \
			echo "Colima IP: $$DOCKER_HOST_IP"; \
		fi; \
		echo "Using DOCKER_HOST_IP=$$DOCKER_HOST_IP"; \
		cat certs/minio/openssl.cnf.template | sed "s/{{DOCKER_HOST_IP}}/$$DOCKER_HOST_IP/g" > certs/minio/openssl.cnf; \
		openssl req -new -key certs/minio/private.key -out certs/minio/minio.csr -subj "/C=RU/ST=Local/L=Local/O=MinIO/CN=minio" -config certs/minio/openssl.cnf; \
		openssl x509 -req -in certs/minio/minio.csr -CA certs/ca/ca.crt -CAkey certs/ca/ca.key -CAcreateserial -out certs/minio/public.crt -days 3650 -sha256 -extensions v3_req -extfile certs/minio/openssl.cnf; \
	)
	@echo "‚úÖ \033[1;32m–ì–æ—Ç–æ–≤–æ! CA –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ª–µ–∂–∞—Ç –≤ certs/ca –∏ certs/minio\033[0m"

# --- –ó–∞–ø—É—Å–∫ Github Actions –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ act ---
run-gh-actions:
	@if [ ! -S /var/run/docker.sock ]; then \
		echo "‚ùå \033[1;31m–ù–µ –Ω–∞–π–¥–µ–Ω /var/run/docker.sock\033[0m"; \
		echo "–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Colima, —Å–æ–∑–¥–∞–π—Ç–µ —Å–∏–º–ª–∏–Ω–∫ –∫–æ–º–∞–Ω–¥–æ–π:"; \
		echo "  \033[1;33msudo ln -s ~/.colima/default/docker.sock /var/run/docker.sock\033[0m"; \
		echo "–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Docker Desktop, –æ—Ç–∫—Ä–æ–π—Ç–µ Docker Desktop ‚Üí Settings ‚Üí Advanced –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ, –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é 'Use the default socket path'.\n"; \
		exit 1; \
	fi; \
	act -j integration-tests --container-architecture linux/amd64