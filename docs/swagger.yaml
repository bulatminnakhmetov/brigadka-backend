basePath: /api
definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.RefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  internal_handler_auth.AuthResponse:
    properties:
      refresh_token:
        type: string
      token:
        type: string
      user_id:
        type: integer
    type: object
  internal_handler_profile.City:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  internal_handler_profile.ProfileCreateRequest:
    properties:
      bio:
        type: string
      birthday:
        $ref: '#/definitions/profile.Date'
      city_id:
        type: integer
      full_name:
        type: string
      gender:
        type: string
      goal:
        type: string
      improv_styles:
        items:
          type: string
        type: array
      looking_for_team:
        type: boolean
      user_id:
        type: integer
    required:
    - full_name
    - user_id
    type: object
  internal_handler_profile.ProfileUpdateRequest:
    properties:
      avatar:
        type: integer
      bio:
        type: string
      birthday:
        $ref: '#/definitions/profile.Date'
      city_id:
        type: integer
      full_name:
        type: string
      gender:
        type: string
      goal:
        type: string
      improv_styles:
        items:
          type: string
        type: array
      looking_for_team:
        type: boolean
      videos:
        items:
          type: integer
        type: array
    type: object
  internal_handler_profile.TranslatedItem:
    properties:
      code:
        type: string
      description:
        type: string
      label:
        type: string
    type: object
  main.HealthResponse:
    properties:
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  media.MediaResponse:
    properties:
      id:
        type: integer
    type: object
  profile.Date:
    properties:
      time.Time:
        type: string
    type: object
  profile.Image:
    properties:
      ID:
        type: integer
      url:
        type: string
    type: object
  profile.Profile:
    properties:
      avatar:
        $ref: '#/definitions/profile.Image'
      bio:
        type: string
      birthday:
        type: string
      city_id:
        type: integer
      city_name:
        type: string
      created_at:
        type: string
      full_name:
        type: string
      gender:
        type: string
      goal:
        type: string
      improv_styles:
        items:
          type: string
        type: array
      looking_for_team:
        type: boolean
      videos:
        items:
          $ref: '#/definitions/profile.Video'
        type: array
    type: object
  profile.Video:
    properties:
      ID:
        type: integer
      thumbnail_url:
        type: string
      url:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@brigadka.com
    name: API Support
  description: API для сервиса Brigadka
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Brigadka API
  version: "1.0"
paths:
  /api/auth/verify:
    get:
      consumes:
      - application/json
      description: Verify JWT token validity
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            type: string
        "401":
          description: Invalid token
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Token verification
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user by email and password
      parameters:
      - description: Login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handler_auth.AuthResponse'
        "400":
          description: Invalid data
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new token using a refresh token
      parameters:
      - description: Token refresh data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handler_auth.AuthResponse'
        "400":
          description: Invalid data
          schema:
            type: string
        "401":
          description: Invalid refresh token
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Token refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_handler_auth.AuthResponse'
        "400":
          description: Invalid data
          schema:
            type: string
        "409":
          description: Email already registered
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User registration
      tags:
      - auth
  /catalog/cities:
    get:
      description: Retrieves a list of available cities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handler_profile.City'
            type: array
        "500":
          description: Server error
          schema:
            type: string
      summary: Get Cities
      tags:
      - catalog
  /catalog/genders:
    get:
      description: Retrieves a catalog of genders with translations
      parameters:
      - description: 'Language code (default: en)'
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handler_profile.TranslatedItem'
            type: array
        "500":
          description: Server error
          schema:
            type: string
      summary: Get Genders
      tags:
      - catalog
  /catalog/improv-goals:
    get:
      description: Retrieves a catalog of improv goals with translations
      parameters:
      - description: 'Language code (default: en)'
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handler_profile.TranslatedItem'
            type: array
        "500":
          description: Server error
          schema:
            type: string
      summary: Get Improv Goals
      tags:
      - catalog
  /catalog/improv-styles:
    get:
      description: Retrieves a catalog of improv styles with translations
      parameters:
      - description: 'Language code (default: en)'
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handler_profile.TranslatedItem'
            type: array
        "500":
          description: Server error
          schema:
            type: string
      summary: Get Improv Styles
      tags:
      - catalog
  /health:
    get:
      description: Возвращает статус сервиса
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.HealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/main.HealthResponse'
      summary: Проверка здоровья сервиса
      tags:
      - health
  /media/video:
    post:
      consumes:
      - multipart/form-data
      description: Upload media file (image or video)
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
        "400":
          description: Invalid file
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "413":
          description: File too large
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Upload media
      tags:
      - media
  /profiles:
    patch:
      consumes:
      - application/json
      description: Updates an existing user profile (partial update)
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_handler_profile.ProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.Profile'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Profile not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update Profile
      tags:
      - profile
    post:
      consumes:
      - application/json
      description: Creates a new user profile
      parameters:
      - description: Profile data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_handler_profile.ProfileCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/profile.Profile'
        "400":
          description: Invalid request body
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "409":
          description: Profile already exists for this user
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create Profile
      tags:
      - profile
  /profiles/{userID}:
    get:
      description: Retrieves a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.Profile'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: Profile not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get Profile
      tags:
      - profile
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
